{"version":3,"sources":["ParticleComponent.js","App.js","serviceWorker.js","index.js"],"names":["style","position","top","left","width","height","params","particles","App","useState","response","setResponse","error","setError","isLoading","setIsLoading","useEffect","a","console","log","fetch","res","json","fetchData","className","role","aria-label","Object","entries","photos","map","key","values","src","img_src","alt","ParticleComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a42b7cdf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nexport default () => (\r\n  <div\r\n    style={{\r\n      position: \"fixed\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n    }}\r\n  >\r\n    <Particles\r\n      params={{\r\n        particles: {\r\n            \"number\": {\r\n                \"value\": 160,\r\n                \"density\": {\r\n                  \"enable\": true,\r\n                  \"value_area\": 800\r\n                }\r\n              },\r\n              \"color\": {\r\n                \"value\": \"#ffffff\"\r\n              },\r\n              \"shape\": {\r\n                \"type\": \"circle\",\r\n                \"stroke\": {\r\n                  \"width\": 0,\r\n                  \"color\": \"#000000\"\r\n                },\r\n                \"polygon\": {\r\n                  \"nb_sides\": 5\r\n                },\r\n                \"image\": {\r\n                  \"src\": \"img/github.svg\",\r\n                  \"width\": 100,\r\n                  \"height\": 100\r\n                }\r\n              },\r\n              \"opacity\": {\r\n                \"value\": 1,\r\n                \"random\": true,\r\n                \"anim\": {\r\n                  \"enable\": true,\r\n                  \"speed\": 1,\r\n                  \"opacity_min\": 0,\r\n                  \"sync\": false\r\n                }\r\n              },\r\n              \"size\": {\r\n                \"value\": 3,\r\n                \"random\": true,\r\n                \"anim\": {\r\n                  \"enable\": false,\r\n                  \"speed\": 4,\r\n                  \"size_min\": 0.3,\r\n                  \"sync\": false\r\n                }\r\n              },\r\n              \"line_linked\": {\r\n                \"enable\": false,\r\n                \"distance\": 150,\r\n                \"color\": \"#ffffff\",\r\n                \"opacity\": 0.4,\r\n                \"width\": 1\r\n              },\r\n              \"move\": {\r\n                \"enable\": true,\r\n                \"speed\": 1,\r\n                \"direction\": \"none\",\r\n                \"random\": true,\r\n                \"straight\": false,\r\n                \"out_mode\": \"out\",\r\n                \"bounce\": false,\r\n                \"attract\": {\r\n                  \"enable\": false,\r\n                  \"rotateX\": 600,\r\n                  \"rotateY\": 600\r\n                }\r\n              }\r\n            },\r\n            \"interactivity\": {\r\n              \"detect_on\": \"canvas\",\r\n              \"events\": {\r\n                \"onhover\": {\r\n                  \"enable\": true,\r\n                  \"mode\": \"bubble\"\r\n                },\r\n                \"onclick\": {\r\n                  \"enable\": true,\r\n                  \"mode\": \"repulse\"\r\n                },\r\n                \"resize\": true\r\n              },\r\n              \"modes\": {\r\n                \"grab\": {\r\n                  \"distance\": 400,\r\n                  \"line_linked\": {\r\n                    \"opacity\": 1\r\n                  }\r\n                },\r\n                \"bubble\": {\r\n                  \"distance\": 250,\r\n                  \"size\": 0,\r\n                  \"duration\": 2,\r\n                  \"opacity\": 0,\r\n                  \"speed\": 3\r\n                },\r\n                \"repulse\": {\r\n                  \"distance\": 400,\r\n                  \"duration\": 0.4\r\n                },\r\n                \"push\": {\r\n                  \"particles_nb\": 4\r\n                },\r\n                \"remove\": {\r\n                  \"particles_nb\": 2\r\n                }\r\n              }\r\n            },\r\n            \"retina_detect\": true\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","import React, { useState, useEffect } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ParticleComponent from \"./ParticleComponent\";\n\nconst App = () => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const DEMO_KEY = \"XbovXMaLIgC2GIxBbxVhHW4b6hgPfu4yB0PRjMw1\";\n  const url =\n    \"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-7-12&api_key=XbovXMaLIgC2GIxBbxVhHW4b6hgPfu4yB0PRjMw1\";\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      console.log(setIsLoading);\n      try {\n        const res = await fetch(url);\n        const json = await res.json();\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"text-headers\">\n        <h1 className=\"text-header\">\n          Mars Rover Photos of NASA\n          <span role=\"img\" aria-label=\"Rocket\">\n            {\" \"}\n            üöÄ\n          </span>\n        </h1>\n        <div>\n          <h2 className=\"text-headers\">Images from Curiosity Rover</h2>\n          <p>Captured Earth Date: July 12, 2015</p>\n        </div>\n      </div>\n      <div className=\"body-container\">\n        {isLoading ? (\n          <div>\n            <p>‚è≤Loading...</p>\n          </div>\n        ) : response ? (\n          Object.entries(response.photos).map(([key, values]) => {\n            return (\n              <div key={key} className=\"image-container\">\n                <img\n                  key={key}\n                  className=\"image-rover\"\n                  src={values.img_src}\n                  alt=\"image_from_rover\"\n                />\n              </div>\n            );\n          })\n        ) : (\n          <p>{error}</p>\n        )}\n      </div>\n      <Router>\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        >\n          <ParticleComponent />\n          <div\n            style={\n              {\n              }\n            }\n          ></div>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}